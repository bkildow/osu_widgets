<?php
/**
 * @file
 * Code for the OSU Widgets feature.
 */

include_once 'osu_widgets.features.inc';

/**
 * Implements hook_css_alter().
 *
 * Removes panopoly's widget css.
 */
function osu_widgets_css_alter(&$css) {
  $path = drupal_get_path('module', 'panopoly_widgets');

  // We use our own version of panopoly widgets css.
  unset($css[$path . '/panopoly-widgets.css']);
}

/**
 * Implements hook_init().
 */
function osu_widgets_init() {

  // Add our override for panopoly widgets without the responsive table stuff.
  $path = drupal_get_path('module', 'osu_widgets');
  drupal_add_css($path . '/osu_widgets_panopoly_override.css', array(
    'group' => CSS_DEFAULT,
    'every_page' => TRUE,
  ));

  osu_widgets_hook_register_osu_widgets();
}

/**
 * Implements hook_entity_info_alter().
 */
function osu_widgets_entity_info_alter(&$entity_info) {

  // Carousel.
  $entity_info['fieldable_panels_pane']['bundles']['osu_carousel'] = array(
    'label' => t('Add carousel'),
    'pane category' => t('Custom'),
    'pane top level' => TRUE,
    'pane icon' => drupal_get_path('module', 'panopoly_widgets') . '/images/icon_link.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/osu_carousel',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );

  // Slideshow.
  $entity_info['fieldable_panels_pane']['bundles']['osu_slideshow'] = array(
    'label' => t('Add slideshow'),
    'pane category' => t('Custom'),
    'pane top level' => TRUE,
    'pane icon' => drupal_get_path('module', 'panopoly_widgets') . '/images/icon_link.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/osu_slideshow',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );

  // Spotlight.
  $entity_info['fieldable_panels_pane']['bundles']['osu_spotlight'] = array(
    'label' => t('Add spotlight'),
    'pane category' => t('Custom'),
    'pane top level' => TRUE,
    'pane icon' => drupal_get_path('module', 'panopoly_widgets') . '/images/icon_link.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/osu_spotlight',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function osu_widgets_libraries_info() {
  $libraries['bxslider'] = array(
    'name' => 'bxSlider',
    'vendor url' => 'http://bxslider.com',
    'download url' => 'http://bxslider.com/lib/jquery.bxslider.zip',
    'version' => '4',
    'files' => array(
      'js' => array('jquery.bxslider.min.js'),
      'css' => array('jquery.bxslider.css'),
    ),
    'integration files' => array(
      'osu_widgets' => array(
        'js' => array('osu_widgets.js'),
        'css' => array('osu_widgets.css'),
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_ds_field_theme_functions_info().
 */
function osu_widgets_ds_field_theme_functions_info() {
  return array(
    'theme_ds_field_carousel' => t('Carousel'),
    'theme_ds_field_slideshow' => t('Slideshow'),
    'theme_ds_field_slideshow_image' => t('Slideshow Image'),
    'theme_ds_field_spotlight' => t('Spotlight'),
  );
}

/**
 * Theme callback function.
 *
 * @param array $variables
 *   variables array
 *
 * @return string
 *   html to be displayed
 */
function theme_ds_field_slideshow_image($variables) {

  $output = '';
  $output .= '<div class="slideshow-image-wrapper">';

  foreach ($variables['items'] as $delta => $item) {
    $output .= drupal_render($item);
  }

  $output .= '<div class="slideshow-image-bottom"></div>';
  $output .= '</div>';

  return $output;
}

/**
 * Theme callback function.
 *
 * @param array $variables
 *   variables array
 *
 * @return string
 *   html to be displayed
 */
function theme_ds_field_slideshow($variables) {

  libraries_load('bxslider');

  $obj = $variables['element']['#object'];

  $link1 = osu_widgets_get_callout_link($obj->field_osu_callout_link_1, $obj->field_osu_callout_icon_1);
  $link2 = osu_widgets_get_callout_link($obj->field_osu_callout_link_2, $obj->field_osu_callout_icon_2);

  $output = '<div class="slideshow-widget">';
  $output .= '<ul class="bxslideshow">';

  foreach ($variables['items'] as $delta => $item) {
    osu_widgets_attach_callout_links($item, $link1, $link2);

    $rendered_item = drupal_render($item);
    $output .= '<li>' . $rendered_item . '</li>';
  }

  $output .= '</ul>';
  $output .= '</div>';

  return $output;
}

/**
 * Theme callback function.
 *
 * @param array $variables
 *   variables array
 *
 * @return string
 *   html to be displayed
 */
function theme_ds_field_spotlight($variables) {

  libraries_load('bxslider');

  $obj = $variables['element']['#object'];

  $output = '<div class="spotlight-widget">';
  $output .= '<ul class="bxspotlight">';

  foreach ($variables['items'] as $delta => $item) {
    $rendered_item = osu_widgets_get_spotlight_image($item);
    $output .= '<li>' . $rendered_item . '</li>';
  }

  $output .= '</ul>';
  $output .= '</div>';

  return $output;
}

/**
 * Takes a render array, and spits out markup.
 *
 * @param array $item
 *   render array for the spotlight
 *
 * @return string
 *   image and option link markup
 */
function osu_widgets_get_spotlight_image(&$item) {

  $fci = array_shift($item['entity']['field_collection_item']);
  $image = drupal_render($fci['field_osu_spotlight_image']);

  $url = '';

  // Make sure we have the array structure expected.
  if (isset($fci['field_osu_spotlight_link']['#items'][0]['url'])) {
    $url = $fci['field_osu_spotlight_link']['#items'][0]['url'];
  }

  // Do we have a link?
  if (!empty($url)) {
    // Wrap the image with it.
    $output = '<a href="' . $url . '">' . $image . '</a>';
  }
  else {
    // Otherwise, just show the image.
    $output = $image;
  }

  return $output;
}

/**
 * Appends the callout links to the "lean more" node link.
 *
 * Returns if link1 is empty.
 *
 * @param array $item
 *   render array containing a node
 * @param string $link1
 *   first link to attach
 * @param string $link2
 *   second link to attach
 */
function osu_widgets_attach_callout_links(&$item, $link1, $link2) {
  if (empty($link1)) {
    return;
  }

  reset($item['node']);
  $key = key($item['node']);
  $item['node'][$key]['node_link'][0]['#markup'] .= '<div class="slideshow-callout">' . $link1 . $link2 . '</div>';
}

/**
 * Creates a link from a link render array and adds an icon class if provided.
 *
 * @param array $link
 *   render array for a link field
 * @param array $icon
 *   render array for a text field containing the string of the class name
 *
 * @return string
 *   returns html for the callout link
 */
function osu_widgets_get_callout_link($link, $icon) {
  if (empty($link)) {
    return '';
  }

  $url = isset($link[LANGUAGE_NONE][0]['url']) ? $link[LANGUAGE_NONE][0]['url'] : '';
  $title = isset($link[LANGUAGE_NONE][0]['title']) ? $link[LANGUAGE_NONE][0]['title'] : '';
  $icon_class = isset($icon[LANGUAGE_NONE][0]['value']) ? $icon[LANGUAGE_NONE][0]['value'] : '';

  $options = array();

  if (!empty($icon_class)) {
    $options = array(
      'html' => TRUE,
    );

    $title = '<i class="' . $icon_class . '"></i> ' . $title;
  }

  return l($title, $url, $options);
}

/**
 * Implements hook_entity_view().
 *
 * Sets up the carousel wrapper class based on the settings
 * (full_width or inline).
 */
function osu_widgets_entity_view($entity, $type, $view_mode, $langcode) {

  if (isset($entity->bundle) && $entity->bundle == 'osu_carousel') {

    // Get the value of the display setting field.
    $wrapper = entity_metadata_wrapper($type, $entity);
    $display_setting = $wrapper->field_osu_carousel_display->value();

    if ($display_setting == 'inline') {
      $class = 'carousel-inline-widget';
    }
    else {
      $class = 'carousel-widget';
    }

    // Create a wrapper with the correct carousel class.
    $entity->content['#prefix'] = '<div class="' . $class . '">';
    $entity->content['#suffix'] = '</div>';
  }
}

/**
 * Theme function to output the carousel.
 *
 * This specifically themes a field collection with the fields
 * osu_carousel_link and osu_carousel_image.
 */
function theme_ds_field_carousel($variables) {

  libraries_load('bxslider');

  $output = '<ul class="bxcarousel">';

  // Render the items.
  foreach ($variables['items'] as $delta => $item) {
    $collection = reset($item['entity']['field_collection_item']);
    $image = $collection['field_osu_carousel_image'];
    $title = $collection['field_osu_carousel_title'];
    $rendered_image = drupal_render($image);
    $rendered_title = drupal_render($title);

    // Set url if it exists.
    $url = isset($collection['field_osu_carousel_link']) ?
      $collection['field_osu_carousel_link']['#items'][0]['url'] :
      FALSE;

    $image_and_title_output = $rendered_image . '<p>' . $rendered_title . '</p>';

    if ($url) {
      $image_and_title_output = '<a href="' . $url . '">' . $image_and_title_output . '</a>';
    }

    $output .= '<li>' . $image_and_title_output . '</li>';
  }

  $output .= '</ul>';
  return $output;
}

/**
 * Adds in a hook to register osu widgets.
 */
function osu_widgets_hook_register_osu_widgets() {
  $widgets = module_invoke_all('osu_widgets_register');
  if (count($widgets) > 0) {
    foreach ($widgets as $widget) {
      osu_widgets_register($widget);
    }
  }
}

/**
 * Helper function that stores widget name in static cache.
 */
function osu_widgets_register($widget) {
  $widget = check_plain($widget);
  $widgets = & drupal_static('osu_widgets_widget_list', array());
  if (!in_array($widget, $widgets)) {
    $widgets[] = $widget;
  }

}

/**
 * Return list of registered OSU widgets.
 */
function osu_widgets_list() {
  $widgets = & drupal_static('osu_widgets_widget_list', array());
  return $widgets;
}


/**
 * Implements hook_preprocess_panels_pane().
 *
 * In order to add 'osu-widget' class as necessary.
 */
function osu_widgets_preprocess_panels_pane(&$vars) {
  $osu_widgets = osu_widgets_list();
  if (in_array($vars['pane']->subtype, $osu_widgets)) {
    // This is a registered OSU widget.
    if (!in_array('osu-widget', $vars['classes_array'])) {
      // Doesn't have the osu-widget class, add it.
      $vars['classes_array'][] = 'osu-widget';
    }
  }
}

/**
 * Checks if string $widget is in array $widgets, returns value accordingly.
 */
function osu_widgets_is_osu_widget($widget) {
  $widget = check_plain($widget);
  $osu_widgets = osu_widgets_list();
  return in_array($widget, $osu_widgets);
}
